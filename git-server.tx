

##  GENERAL

##  edit ~/.gitconfig to avoid main/master initial branch name conflicts
git config --global init.defaultBranch main




##  SERVER INITIALISATION VIA HTTP

##  sync local git with git server repo via http
git remote add origin https://git-server.com/user/repo

##  edit ~/.git/config to set default username for http commits
git config credential.username username-here

##  edit ./.git/config to store/retrieve username & token via disk at ~/.git-credentials
git config credential.helper 'store'

##  edit ~/.gitconfig to set RAM-based credentials cache timeout for commits (~1 second due to speculative exec bugs)
git config --global credential.helper 'cache --timeout=1'




##  SERVER INITIALISATION VIA SSH

##  get server pubkey for ~/.ssh/known_hosts and check server has client pubkey (after manually via website)
ssh -T git@git-server.com

##  sync local git with git server repo via ssh
git remote add origin git@github.com:user/repo

##  clone via ssh
git clone git@git-server.com:user/repo.git

##  specify specific ssh key to use during push (or use ~/.ssh/config)
GIT_SSH_COMMAND='ssh -i ~/.ssh/your_key' && export GIT_SSH_COMMAND




##  SERVER INTERACTIONS - BRANCHES TO/FROM SERVER
##  https://www.git-scm.com/book/en/v2/Distributed-Git-Contributing-to-a-Project

##  view current repo server syncs incl. protocol
git remote -v

##  push local branch to server (same name)
git push -u origin local_branch

##  push local branch to specific branch (different branch names) on server
git push -u origin local_branch:origin/remote_branch

##  update local data regarding branches on server
git fetch --all

##  list local & remote branches
git branch -a

##  show git log of remote branch
git log remote/branch

##  create new branch, based on remote branch
git checkout -b local_branch origin/remote_branch

##  merge current local branch with remote branch, both of same name
git merge

##  merge current local branch with specific remote branch
git merge origin/remote_branch

##  when git mergetool doesn't work out
git merge --abort

##  delete remote branch
git push origin -d remote_branch




##  GPG SIGNED COMMITS

##  edit ~/.gitconfig to set commits to always be signed
git config --global commit.gpgsign true

##  edit ./.git/config to set key to use when signing commits
git config --local user.signingkey <KEY ID>

##  commit with gpg signature
git commit -S -m "about commit"

##  show signatures in commit log
git log --show-signature




