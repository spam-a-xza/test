
##  EXPERIMENTS WITH THREE USERS:
##  user-a setup main branch & repo
##  user-c downloaded main branch & built a sub-branch off it, pushed to server, made more changes
##  user-b downloaded & edited sub-branch, downloaded new changes again, merged a conflict, pushed to server
##  user-a downloaded sub-branch and merged to main, pushed main to server
##  main branch: https://github.com/spam-a-xza/test/commits/main/git-server.tx


##  GENERAL

##  edit ~/.gitconfig to avoid main/master initial branch name conflicts
git config --global init.defaultBranch main


##  SERVER INITIALISATION VIA HTTP

##  sync local git with git server repo via http
git remote add origin https://git-server.com/user/repo

##  edit ~/.git/config to set default username for http commits
git config credential.username username-here

##  edit ./.git/config to store/retrieve username & token via disk at ~/.git-credentials
git config credential.helper 'store'

##  edit ~/.gitconfig to set RAM-based credentials cache timeout for commits (~1 second due to speculative exec bugs)
git config --global credential.helper 'cache --timeout=1'


##  SERVER INITIALISATION VIA SSH
##  note: no way to verify the server's own ssh pubkey...

##  get server pubkey for ~/.ssh/known_hosts and check server has client pubkey (after manually via website)
ssh -T git@git-server.com

##  sync local git with git server repo via ssh
git remote add origin git@git-server.com:user/repo

##  clone via ssh
git clone git@git-server.com:user/repo.git

##  specify specific ssh key to use during push (or use ~/.ssh/config)
GIT_SSH_COMMAND='ssh -i ~/.ssh/your_key' && export GIT_SSH_COMMAND


##  SERVER INTERACTIONS - BRANCHES TO/FROM SERVER
##  https://www.git-scm.com/book/en/v2/Distributed-Git-Contributing-to-a-Project

##  view current repo server syncs incl. protocol
git remote -v

##  update local data regarding branches on server
git fetch --all

##  list local & remote branches
git branch -a

##  show git log of remote branch
git log origin/remote_branch

##  create new branch, based on remote branch (remote branch copies are read-only)
git checkout -b local_branch origin/remote_branch

##  merge remote branch into current local branch, both of same name
git merge

##  merge specific remote branch into local branch
git merge local_branch origin/remote_branch

##  when git mergetool doesn't work out
git merge --abort

##  merge two local branches
git merge local_branch local_branch2

##  push local branch to server (same name)
git push -u origin local_branch

##  push local branch to specific branch (different branch names) on server
git push -u origin local_branch:origin/remote_branch

##  delete remote branch
git push origin -d remote_branch


##  GPG SIGNED COMMITS

##  edit ~/.gitconfig to set commits to always be signed
git config --global commit.gpgsign true

##  edit ./.git/config to set key to use when signing commits
git config --local user.signingkey <KEY ID>

##  commit with gpg signature (note: email address of key & config must match, e.g. if using noreply)
git commit -S -m "about commit"

##  show signatures in commit log
git log --show-signature

